<?php
/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function current_posts_help($path, $arg) {
  switch ($path) {
    case "admin/help#current_posts":
      return '<p>' . t("Displays links to nodes created on this date") . '</p>';
      break;
  }
} 

/**
 * Implements hook_block_info().
 */
function current_posts_block_info() {
  $blocks['current_posts'] = array(
    // The name that will appear in the block list.
    'info' => t('Current posts'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Custom content function. 
 * 
 * Set beginning and end dates, retrieve posts from database
 * saved in that time period.
 * 
 * @return 
 *   A result set of the targeted posts.
 */
 function current_posts_content(){
    //Get today's date
    $today = getdate();
    //Calculate the date a week ago.
    $start_time = mktime(0, 0, 0, $today['mon'], ($today['mday'] - 7), $today['year']);
    //Get all posts from one week ago to the present.
    $end_time = time();
    
    //New line
    $max_num = variable_get('current_posts_max', 3);
    //Use Database API to retrieve current posts
    $query = db_select('node', 'n')
            ->fields('n', array('nid', 'title', 'created'))
            ->condition('status', 1) //Published
            ->condition('created', array($start_time, $end_time), 'BETWEEN')
            ->orderBy('created', 'DESC') //Most recent first.
            ->range(0, $max_num) //LIMIT to 10 records
            ->execute();
    return $query;
 }
 
function current_posts_block_view($delta = '') {
    switch ($delta) {
        case 'current_posts':
        $block['subject'] = t('Current posts');
        if (user_access('access content')) {
            // Retrieve and process data here.
            $result = current_posts_content();
            // Array to contain items for the block to render
            $items = array();
            // Iterate over the resultset and format as links
            foreach($result as $node){
                $items[] = array(
                'data' => l($node->title, 'node/'. $node->nid)
                );
            };
        }
        // No content in the last week.
        if (empty($items)) {
          $block['content'] = t('No posts available.');  
        }
        else {
          //Pass data through theme function.
          $block['content'] = theme('item_list', array(
            'items' => $items));
        }
    }
    return $block;
}

/**
 * Implements hook_menu().
 */
function current_posts_menu(){
    $items = array();
    
    $items['admin/config/content/current_posts'] = array(
        'type' => MENU_NORMAL_ITEM,
        'title' => 'Current posts',
        'description' => 'Configuration for Current posts module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('current_posts_form'),
        'access arguments' => array('access adminstration pages'),
    );
    
    $items['current_posts'] = array(
        'type' => MENU_NORMAL_ITEM,
        'title' => 'Current posts',
        'page callback' => '_current_posts_page',
        'access arguments' => array('access current_posts content')
    );
    
    return $items;
}

/**
 * Page callback: Curent posts settings
 * 
 * @see current_post_menu()
 */
 function current_posts_form($form, &$form_state){
    $form['current_posts_max'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximun number of posts'),
        '#default_value' => variable_get('current_posts_max', 3),
        '#size' => 2,
        '#maxlength' => 2,
        '#description' => t('The maxinum number of links to display in the block.'),
        '#required' => true,
    );
    
    return system_settings_form($form);
 }
 
 /**
  * Implements validation from the Form API
  * 
  * @param $form
  * @param $form_state
  */
 function current_posts_form_validate($form, &$form_state){
    $max_num = $form_state['values']['current_posts_max'];
    if(!is_numeric($max_num)){
        form_set_error('current_posts_max', t('You must enter a number for the maximum be positive.'));
    }
    else if($max_num <= 0){
        form_set_error('current_posts_max', t('Maximum number of posts to display must be positive'));
    }
 }
 
 /**
  * Implements hook_permission().
  */
 function current_posts_permission(){
    return array(
        'access current_posts content' => array(
            'title' => t('Access content for the Current posts module.')
        )
    );
 }
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
?>